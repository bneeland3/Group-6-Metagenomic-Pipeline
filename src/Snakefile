def read_samples(file_name):
    sample = []
    with open(file_name) as f:
      for l in f:
        sample.append(l.rstrip())
    return sample

rule all:
  input:
    expand('{sample}.html', samples=read_samples('eg_sample_names.txt'))
    expand('{sample}.txt', samples=read_samples('eg_sample_names.txt'))

rule dowload_data:
  output:
    "../doc/data/{x}.denovo_duplicates_marked.trimmed.1.fastq",
    "../doc/data/{X}.denovo_duplicates_marked.trimmed.2.fastq"

  shell:
  """
  cd ../doc/data
  'wget -O {output} "https://drive.google.com/drive/folders/1IkvxeZehenan4G-lhmpjBhJ0CBqIbTd9?usp=drive_link"'
  """

rule set_samples:
  input: 

  output:

  shell:

  """
  python quality_utils.py read_samples 
  """


rule fastqc1
  input: 
    reads=["{sample}.denovo_duplicates_marked.trimmed.1.fastq",
    "{sample}.denovo_duplicates_marked.trimmed.2.fastq"]
  output:
    #'{sample}.html'
    multitext("{sample}.html", "{sample}.txt")
  shell:
  """
  cd ../doc/data
  bash fastqc.sh

  """

#rule multiqc1

#rule trimmomatic:
#  input:
#   'samples'
#  output:

#  shell: 
    """
    #!/bin/bash

    for infile in *; do
    base=$(basename ${infile} _R1_001.trimmed.fastq.gz)
    echo "Running sample ${base}"

    echo "Trimmomatic for ${base}"
    trimmomatic PE -threads 10 -trimlog trimmed_output/${base}.trimlog -summary trimmed_output/${base}.trim.log -validatePairs ${base}_R1_001.fastq.gz ${base}_R2_001.fastq.gz -baseout trimmed_output/${base}.trimmed SLIDINGWINDOW:4:20 LEADING:20 TRAILING:20 MINLEN:50
    done
    """

#rule fastqc2

#rule multiqc2

