import pandas as pd
from os.path import join as pj
from os.path import split

from glob import glob
SAMPLES = set()
PREFIX = "/pl/active/ADOR/projects/mothersmilk/chla_data_transfer/fastq/fastq/"
with open('samples.txt', "r") as file:
    for line in file:
        sample = line.rstrip() # sample is the line without any whitespace
        if len(sample) > 0: # if the sample string is not empty ...
            # Want to see if the files exist before we add them
            rel_files = glob(PREFIX + sample.split('_')[0] + "*") # Note, * is a wildcard, matches anything
            if len(rel_files) > 0:
                # If files exist then likely fastqc worked and we can use this one
                # Otherwise, it must have been one of those messed up gzips, hence why
                # there are no files for us to apply fastqc to in the first place.
                SAMPLES.add(sample)
SAMPLES = list(SAMPLES) # Cast the set to a list so snakemake can "expand" it


rule all:
    input:
        expand("../doc/data/{sample}", sample=SAMPLES), 
        

rule dowload_data:
  output:
    "../doc/data/{x}.denovo_duplicates_marked.trimmed.1.fastq",
    "../doc/data/{x}.denovo_duplicates_marked.trimmed.2.fastq"

  shell:
    '''
    wget -O {output[0]} "https://drive.google.com/drive/folders/1IkvxeZehenan4G-lhmpjBhJ0CBqIbTd9?usp=drive_link" 
    wget -O {output[1]} "https://drive.google.com/drive/folders/1IkvxeZehenan4G-lhmpjBhJ0CBqIbTd9?usp=drive_link"
    '''


rule fastqc_1:
    input:
        FORWARD=f"../doc/data/{{sample}}_1.fq.gz",
        REVERSE=f"../doc/data/{{sample}}_2.fq.gz"
    output:
        directory(f"../doc/data/fastqc_1/{{sample}}.zip")
    conda:
        "fastqc"
    # resources:
        # Cluster from Ryan!
        
    # threads: 16
    shell:
        """
        mkdir -p {output}
        fastqc --threads 10 {input.FORWARD} {input.REVERSE} -o {output} 
        """

rule multiqc_1:
    input:
        '../doc/data/{{sample}}'
    output:
        '../doc/data/multiqc_1/{multiqc_report}'
    conda:
        'multiq'
    # resources:
    shell:
        '''
        mkdir -p {output} 
        multiqc {input} -o {output} 
        '''